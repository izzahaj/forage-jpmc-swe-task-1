From 7ea7f46bcfbac7a40a861ad80219eff812d55ecb Mon Sep 17 00:00:00 2001
From: izzahaj <izzah.jalil02@gmail.com>
Date: Sun, 30 Apr 2023 15:23:17 +0800
Subject: [PATCH] Complete client.py functions and client_test.py unit tests

---
 client3.py     | 11 ++++++++---
 client_test.py | 40 ++++++++++++++++++++++++++++++++++++++--
 2 files changed, 46 insertions(+), 5 deletions(-)

diff --git a/client3.py b/client3.py
index 3fc09b7..5e8d3e3 100644
--- a/client3.py
+++ b/client3.py
@@ -35,14 +35,17 @@ def getDataPoint(quote):
     stock = quote['stock']
     bid_price = float(quote['top_bid']['price'])
     ask_price = float(quote['top_ask']['price'])
-    price = bid_price
+    price = (bid_price + ask_price) / 2
     return stock, bid_price, ask_price, price
 
 
 def getRatio(price_a, price_b):
     """ Get ratio of price_a and price_b """
     """ ------------- Update this function ------------- """
-    return 1
+    if (price_b == 0):
+        return
+    
+    return price_a / price_b
 
 
 # Main
@@ -52,8 +55,10 @@ if __name__ == "__main__":
         quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
 
         """ ----------- Update to get the ratio --------------- """
+        prices = {}
         for quote in quotes:
             stock, bid_price, ask_price, price = getDataPoint(quote)
+            prices[stock] = price
             print("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
 
-        print("Ratio %s" % getRatio(price, price))
+        print("Ratio %s" % getRatio(prices["ABC"], prices["DEF"]))
diff --git a/client_test.py b/client_test.py
index af2bf26..67a6622 100644
--- a/client_test.py
+++ b/client_test.py
@@ -1,5 +1,5 @@
 import unittest
-from client3 import getDataPoint
+from client3 import getDataPoint, getRatio
 
 class ClientTest(unittest.TestCase):
   def test_getDataPoint_calculatePrice(self):
@@ -8,6 +8,12 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
+    for quote in quotes:
+      stock = quote['stock']
+      top_bid = quote['top_bid']['price']
+      top_ask = quote['top_ask']['price']
+      expected_price = (top_bid + top_ask) / 2
+      self.assertEqual(getDataPoint(quote), (stock, top_bid, top_ask, expected_price))
 
   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
     quotes = [
@@ -15,10 +21,40 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
-
+    for quote in quotes:
+      stock = quote['stock']
+      top_bid = quote['top_bid']['price']
+      top_ask = quote['top_ask']['price']
+      expected_price = (top_bid + top_ask) / 2
+      self.assertEqual(getDataPoint(quote), (stock, top_bid, top_ask, expected_price))
 
   """ ------------ Add more unit tests ------------ """
+  def test_getDataPoint_invalidPrices(self):
+    quotes = [
+      {'top_ask': {'price': None, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': None, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+      {'top_ask': {'price': None, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': None, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+    ]
+
+    for quote in quotes:
+      with self.assertRaises(TypeError):
+        getDataPoint(quote)
+
+  def test_getRatio_validPrices(self):
+    price_a = 120.48
+    price_b = 117.87
+    expected_ratio = price_a / price_b
+    self.assertEqual(getRatio(price_a, price_b), expected_ratio)
+    
+  def test_getRatio_zeroDivision(self):
+    price_a = 120.48
+    price_b = 0
+    self.assertIsNone(getRatio(price_a, price_b))
 
+  def test_getRation_negativePrices(self):
+    price_a = -120.48
+    price_b = 117.87
+    expected_ratio = price_a / price_b
+    self.assertEqual(getRatio(price_a, price_b), expected_ratio)
 
 
 if __name__ == '__main__':
-- 
2.38.1

